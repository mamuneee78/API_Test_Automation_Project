{
	"info": {
		"_postman_id": "f51368ac-7874-432c-acba-f5e77ffbee57",
		"name": "MyNewProject",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26041702",
		"_collection_link": "https://interstellar-comet-683128.postman.co/workspace/My-Workspace~6c389ab4-94d0-4fca-865e-917e4746cecf/collection/26041702-f51368ac-7874-432c-acba-f5e77ffbee57?action=share&creator=26041702&source=collection_link"
	},
	"item": [
		{
			"name": "Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var tokenData = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"Token\", tokenData.token)\r",
							"\r",
							"pm.test(\"Token data\", function(){\r",
							"    pm.expect(tokenData.token).to.eql(pm.environment.get(\"Token\"))\r",
							"})\r",
							"pm.test(\"Response Time Validation\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"})\r",
							"pm.test(\"Status code validation\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/auth",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create(Booking)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(firstName)\r",
							"pm.environment.set(\"firstName\", firstName)\r",
							"\r",
							"var LastNAME = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(LastNAME)\r",
							"pm.environment.set(\"lastName\", LastNAME)\r",
							"\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"pm.environment.set(\"checkin\", today.add(5, 'day').format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"checkout\", today.add(1, 'M').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"var depositpaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"console.log(depositpaid)\r",
							"pm.environment.set(\"depositPaid\", Boolean(depositpaid))\r",
							"\r",
							"var totalprice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(totalprice)\r",
							"pm.environment.set(\"totalprice\", parseInt(totalprice))\r",
							"//console.log(today.subtract(1, 'day').format(\"YYYY-MM-DD\"))\r",
							"//  console.log(today.add(3, 'M').format(\"YYYY-MM-DD\"))\r",
							"//  console.log(today.add(2, 'Y').format(\"YYYY-MM-DD\"))\r",
							"//console.log(today.Subtraction(3, 'day').format(\"YYYY-MM-DD\"))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"id\", jsonData.bookingid)\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time validation\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"{{firstName}}\",\r\n    \"lastname\": \"{{lastName}}\",\r\n    \"totalprice\": {{totalprice}},\r\n    \"depositpaid\": {{depositPaid}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkin}}\",\r\n        \"checkout\": \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/booking/",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "FetchBookingData",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code\r",
							"console.log(code)\r",
							"\r",
							"switch(code){\r",
							"    case 200: \r",
							"    var jsonData = pm.response.json()\r",
							"\r",
							"    pm.test(\"First Name Validation\", function() {\r",
							"    pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"firstName\"))\r",
							"    });\r",
							"    pm.test(\"last Name Validation\", function() {\r",
							"    pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"lastName\"))\r",
							"    });\r",
							"    pm.test(\"Total price validation\", function(){\r",
							"        pm.expect(jsonData.totalprice).to.eql(pm.environment.get(\"totalprice\"))\r",
							"    });\r",
							"    pm.test(\"Validate checkin date\", function(){\r",
							"        pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"checkin\"))\r",
							"    });\r",
							"    pm.test(\"Validate the checkout\", function(){\r",
							"        pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"checkout\"))\r",
							"    });\r",
							"    pm.test(\"Depositpaid Validation\", function(){\r",
							"        pm.expect(jsonData.depositpaid).to.deep.eql(pm.environment.get(\"depositPaid\"))\r",
							"    });\r",
							"\r",
							"\r",
							"    pm.test(\"Content-Type header present\", function(){\r",
							"        pm.response.to.header(\"Content-Type\")\r",
							"    });\r",
							"    pm.test(\"Content-Type value test\", function () {\r",
							"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"    });\r",
							"    pm.test(\"Connection header present\", function(){\r",
							"        pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
							"    });\r",
							"    pm.test(\"Response Time validation\", function(){\r",
							"        pm.expect(pm.response.responseTime).to.be.below(3000)\r",
							"    })\r",
							"\r",
							"    break;\r",
							"\r",
							"    case 201:\r",
							"\r",
							"    break;\r",
							"    \r",
							"    case 404:\r",
							"    pm.test(\"Not found\")\r",
							"    break;\r",
							"    \r",
							"    case 500:\r",
							"    pm.test(\"Internal server error\")\r",
							"    break;\r",
							"\r",
							"    default:\r",
							"    pm.test(\"Something Wrong\")\r",
							"\r",
							"\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/booking/{{id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBookingInfo",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"bookingdates validation\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response Time validation\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"{{firstName}}\",\r\n    \"lastname\": \"{{lastName}}\",\r\n    \"totalprice\": {{totalprice}},\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkin}}\",\r\n        \"checkout\": \"{{checkout}}\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/booking/{{id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "FetchUpdatedData",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code\r",
							"console.log(code)\r",
							"\r",
							"switch(code){\r",
							"    case 200: \r",
							"    var jsonData = pm.response.json()\r",
							"\r",
							"    pm.test(\"First Name Validation\", function() {\r",
							"    pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"firstName\"))\r",
							"    });\r",
							"    pm.test(\"last Name Validation\", function() {\r",
							"    pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"lastName\"))\r",
							"    });\r",
							"    pm.test(\"Total price validation\", function(){\r",
							"        pm.expect(jsonData.totalprice).to.eql(pm.environment.get(\"totalprice\"))\r",
							"    });\r",
							"    pm.test(\"Validate checkin date\", function(){\r",
							"        pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"checkin\"))\r",
							"    });\r",
							"    pm.test(\"Validate the checkout\", function(){\r",
							"        pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"checkout\"))\r",
							"    });\r",
							"    pm.test(\"Depositpaid Validation\", function(){\r",
							"        pm.expect(jsonData.depositpaid).to.deep.eql(pm.environment.get(\"depositPaid\"))\r",
							"    });\r",
							"\r",
							"\r",
							"    pm.test(\"Content-Type header present\", function(){\r",
							"        pm.response.to.header(\"Content-Type\")\r",
							"    });\r",
							"    pm.test(\"Content-Type value test\", function () {\r",
							"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"    });\r",
							"    pm.test(\"Connection header present\", function(){\r",
							"        pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
							"    });\r",
							"    pm.test(\"Response Time validation\", function(){\r",
							"        pm.expect(pm.response.responseTime).to.be.below(3000)\r",
							"    })\r",
							"\r",
							"    break;\r",
							"\r",
							"    case 201:\r",
							"\r",
							"    break;\r",
							"    \r",
							"    case 404:\r",
							"    pm.test(\"Not found\")\r",
							"    break;\r",
							"    \r",
							"    case 500:\r",
							"    pm.test(\"Internal server error\")\r",
							"    break;\r",
							"\r",
							"    default:\r",
							"    pm.test(\"Something Wrong\")\r",
							"\r",
							"\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/booking/{{id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/booking/{{id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}